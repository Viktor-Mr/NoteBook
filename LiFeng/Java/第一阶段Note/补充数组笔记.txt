前面学习的数组排序会感觉有点复杂，有没更简单快速（不用动脑）的呢？
JDK提供了用于操作数组的工具类Arrays，其位于java.util包中，使用时需将其导入。下面介绍几种常用的arrays类操作数组的方法。想要了解更多方法，只需自行访问JDK文档即可。
1. String toString(Object[] array)
把数组array转换成一个字符串。这个字符串是这样的形式：
[array[0],array[1],…,array[length-1]]
示例：
int[] a= {8,4,3,11,1,5,9};
 	String s = Arrays.toString(a); 
    System.out.print(s);
	运行结果：
[8, 4, 3, 11, 1, 5, 9]
2. boolean equals(Object[] array1,Object[] array2)
比较两个数组是否相等。
示例：
int a[]= {1,2,3};
int b[]= {1,2,3};
boolean is = Arrays.equals(a,b);  //is结果为true
3. void sort(Object[] array)
对数组array的元素进行升序排列。
示例：
int[] a= {8,4,3,11,1,5,9};
 	Arrays.sort(a);  
    String s = Arrays.toString(a); 
    System.out.print(s);
	运行结果：
[1,3,4,5,8,9,11]
这样排序是不是就是我们想要的简单快速（不用动脑）呢？说明一下，前面学习的冒泡排序等复杂的排序只是用来开拓思维、学习算法用，真要对数组进行排序用这个简单的方法就行了。
4. void fill(Object[] array,int val)
把数组array的所有元素都赋值为val。
示例：
int[] a = { 8, 4, 3, 11 };
	Arrays.fill(a, 1);  //a变为{1,1,1,1}
	重载方法：fill(array,startIndex,endIndex,val)
该重载方法把数组array从索引startIndex（包括）到endIndex（不包括）之间的元素赋值为val。
5. int binarySearch(Object[] array,Object val)
使用二分搜索法查询元素值val在数组array中的索引，返回要搜索元素的索引值，如果没找到，如果目标值不在数组内的，返回 -（第一个大于目标值的元素的下标+1），类似的，如果数组内的值都比目标值小，则是返回-（数组长度+1）。
示例：
int[] a = { 8, 4, 3, 11, 1, 5, 9 };
	int index = Arrays.binarySearch(a,11);  //index等于3
	重载方法：int binarySearch(Object[] array,int startIndex,int endIndex,Object val)
	该重载方法在数组的指定范围从索引startIndex（包括）开始到endIndex（不包括）之间查找值val，返回要搜索元素的索引值，如果没找到，返回-1。
6. copyOf(Object[] array,int length)
把原数组array的前面length个元素复制到一个新数组中。
如果length等于原数组的长度，则返回一个跟原数组相同的新数组，如果length小于原数组的长度，则只复制原数组的前面length个元素，如果length大于原数组的长度，则多出的元素用默认值来填充（int类型默认值为0，char和String为null）。
示例：
int[] a={8, 4, 3, 11};
	int[] b=Arrays.copyOf(a, a.length);  //b为{8, 4, 3, 11}
	重载方法：copyOf(Object[] array,int startIndex,int endIndex)
	该重载方法表示复制原数组指定范围从索引startIndex（包括）到endIndex（不包括）之间的元素到新数组中。
