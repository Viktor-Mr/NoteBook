问题；
	挑猪:
	体重200斤以上 优质猪
	体重175斤以上 好猪
	体重150斤以上 普通猪
	体重100斤以上 有待发展的猪
	体重50斤以上  需要拯救的猪
	体重50斤以下  废猪
	有范围的判断:
	--200--175--150--100--50
	
超市结算系统:
	1.需要判断用户是否登录
		键盘录入两个数据，一个数据为账号，一个数据为密码
		然后给予提示，你需要判断用户账号和密码是否完全匹配才能进入超市系统购物
	2.如果用户登录，需要购物，如果购物价格大于200元，就可以参与抽奖，否则提示用户退出
	  抽奖的规则为随机数匹配。
			如果随机数的个位数+百位数=8 特等奖
			如果随机数的个位数+十位数=2 一等奖
			如果随机数的个位数+百位数=5 二等奖
			如果随机数的个位数+千位数=6 三等奖
			否则则提示用户未中奖。
			随机数:int sj =(int)(Math.random()*9999)+1000;
			
流程控制语句：
	1.顺序结构 从上往下 依次执行
	2.选择结构 按照不同的选择，执行不同的代码
	3.循环结构 做一些重复的事情
	
if语句:
	三种格式:
		A.格式1
			if(比较表达式){
				//语句体
			}
		执行流程：
			先判断比较表达式的结果
			如果返回的结果为true就执行语句体
			如果返回为false，就不执行语句体
			
		B.格式2
			if(比较表达式1){
				//语句体1
			}else{
				//语句体2
			}
			
		执行流程：
			先判断比较表达式1的结果
			如果返回的结果为true就执行语句体1
			如果返回的结果为false就执行else的语句体2
			
		C.格式3,多重if,达到多条分支
		
			if(比较表达式1){
				//语句体1
			}else if(比较表达式2){
				//语句体2
			}else if(比较表达式3){
				//语句体3
			}else if(比较表达式4){
				//语句体4
			}else{
				//语句体5
			}
			
		执行流程：
			首先计算比较表达式1的结果，看其返回的是true还是false
			如果是是true，就执行语句体1 if语句到此结束
			如果返回的是false,接着来比较下一个表达式(比较表达式2)，看其返回的是false还是true
			如果是true，执行语句体2 if语句到此结束
			如果返回的是false,接着来比较下一个表达式(比较表达式3)，看其返回的是false还是true
			.....
			如果条件都不满足，看有没有单个的else，如果有的话 执行else,如果没有 就全部不执行
		

	三元运算符和if语句第二种格式的区别:
		if的语句的第二种格式，也可以完成三元运算符一样的效果
		所以，我们是不是就认为他们可以完成一样的操作
		但是，他们就一点区别都没有么？肯定不是。
		
		区别:
			三元运算符能完成的功能，if语句都可以实现
			但是，if语句能够完成的功能三元运算符不一定能够实现
			a.三元运算符只能够返回一个明确的结果
			b.三元运算符不具备代码的再次扩展
			什么时候if语句实现的，三元不能实现?
				当if语句控制的是一个输出语句的时候，三元不能够实现
				为什么?因为三元运算符操作的是是一个结果集，返回的也必须是一个数据类型，而不是一个输出
			一般来说,if是我们经经常使用的语句，三目运算符几乎不用

			
			
	if语句的注意事项:
		A：比较表达式无论是简单还是复杂，他的返回结果必须是boolean类型的
		B：if语句控制的语句，如果只是一条语句 大括号 可以省略
			如果是多条语句的话，除了第一条语句在if的控制范围之类，其余的语句均是按照正常的顺序语句来执行
			虽然可以省略，但是建议永远不要省略，因为不利于程序的阅读，也失去的if可扩展性
			
			
	Switch:
	switch语句格式:
		switch(表达式){
			case 比较的值1:
				语句体1;
					....
				break;
			case 比较的值2:
				语句体2;
				break;
			...
			default:
				语句体...;
				break;
		
		}
		
	格式的解释:
		switch:表示这就是一个switch的选择结构的声明
		表达式:他的取值是有一定限制
			基本的取值:byte/short/int/char
			JDK5的版本以后支持枚举类
			JDK7的版本以后支持String
		case:这个case跟着的值就是要跟你表达式的值做比较的，看其返回的是true还是false
			 如果是true就执行相对应的case的语句体。
			 如果是false，就不执行该语句 继续和下面的case的值进行比较
			 最后，一定要注意，你case后面的值一定要和表达式的值的数据类型保持一致，否则无法比较
		语句体:就是你要执行的相关的代码
		break:表示跳出或者结束当前的switch语句，break后面的所有switch语句的代码全部不会执行了
		default:当所有的case的值 都不能和表达式的值匹配的时候。就会执行default语句。
		
	注意:
		A:case后面跟着的值是不能够发生任何形式改变的,所以只能够放常量
		B:break是可以不写的，但是要考虑到程序的合理的设计性，因为break不加会造成case的穿透
		C:case里面，break后面不允许在写任何的代码,因为break已经结束了程序的执行 后面任何的代码的都无法执行 JVM是不允许你这么做的
		D:同一个switch里面，case的值是唯一的，不能存在相同
		E:除了switch能够支持的数据类型，其余的任何数据类型都不能够放在case里面
		F:case跟比较值中间必须有空格分开，而且case后面只能够写一个固定的值
		G:case后面的值运行常量的相加，因为常量加常量还是常量，是在规则允许范围之类，但是不能写成常量++ 因为常量是不允许改变的
		H:default的位置不一定是最后面，可以是任何位置 但是一般来说，建议放在后面


循环体语句:
	1.有三种:for循环、while循环、do..while循环
	2.for循环
		格式:
			for(初始化语句A ; 判断条件语句B ;控制条件语句D ){
				循环体语句C;
			}
		执行流程:
			A.执行初始化语句(其实初始化语句就一个变量，并且赋了一个初始化值，我们根据这个初始化值来判断这个循环从第几次开始)
			B.判断条件语句(其实初始化语句的这个变量，做成一个逻辑变量 根据这个判断返回的结果来决定是否执行这个循环)
				返回的true，表示继续执行这个循环C
				返回的false，表示结束这个循环
			C.在判断条件语句为true的时候,执行循环体语句
			D.在判断条件语句为true的时候,执行控制条件语句(一般都是在初始化条件语句的变量上做自增或者自减的操作)
			E.继续返回B
	3.注意事项
		a.判断条件语句无论是简单还是复杂，返回的结果必须是boolean类型
		b.循环体语句，如果是一条的话，大括号可以不写，但是不建议
		c.循环体里面语句本身来说就相对比较复杂，所以在写代码的过程当中 你的代码的格式一定对齐，注释一定要加
		
				
			