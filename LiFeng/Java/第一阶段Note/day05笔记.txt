while循环:
	while循环的基本格式:

		while(判断条件语句){
			循环体语句;
		}

		扩展格式:
			初始化语句A;
			while(判断条件语句B){
			    循环体语句C;
			    控制条件语句D;
		        }

		通过这个格式，我们发现其实跟我们的for循环的格式差不多
		for(初始化语句A;判断条件语句B;控制条件语句D;){
			循环体语句C;
		}
		

for循环跟while循环有没有区别?

	 	使用上的区别:如果你想在你这个循环结束后，继续使用控制条件那个变量，就使用while循环，否则用for循环。
	 	当你不知道需要使用什么循环的时候，那就用for循环吧。
	 	因为变量及早的从内存中消失，可以提高内存的使用率。

	 其实还有一只场景上的区别?
	 	如果是一个范围内的循环，请优先使用for循环
	 	如果你不明确要做多少次，使用while循环
	 	围着操场跑10圈 -- for循环
	 	围着操场跑到累趴为止 -- while循环
		
do..while循环：
		do..while循环的基本格式:
			do{

				循环体语句;
			}while(判断条件语句);

		do..while循环的扩展格式:
			初始化语句;
			do{
				循环体语句;
				控制条件语句;

			}while(判断条件语句);
			
			
循环体语句的区别?
		do..while必须先执行一次。
			而for循环，while先判断再执行

		那么我们优先考虑使用什么循环？
			优先考虑for循环，其次考虑while循环，再去考虑do..while
			
控制跳转语句:
 		break:结束
 		continue:继续
 		return:返回

		break:中断的意思
		
		使用场景:
			A.switch语句当中
			B.循环语句当中
				(特殊情况，你的循环当中有if)
			注意:离开以上场景无意义
			
		如何使用?
			A.跳出单层循环
			B.跳出多层循环
				想要实现跳出多层循环的效果，需要知道一个东西 带标签的语句
				格式:
					标签名:语句
		
Continue:继续

	使用场景:
		只能在循环当中使用，离开循环无意义

	测试,找到break和Continue的区别
		break:跳出循环
		Continue:跳出一次循环，继续执行下一次循环

		for(int x = 1; x <= 10 ;x++){
			if(x%3 == 3){
				在此处填写代码
			}
		}
	
方法:完成特定功能的代码块
	
	注意:在很多语言当中，有函数的定义，但是在JAVA函数被称之为方法
	
	方法的格式:
		修饰符   返回值类型	方法名(参数类型 参数名1,参数类型2 参数名2){
			//方法体语句
			return 返回值;
		}
		
	详细的解释:
		修饰符:目前来说，我们写死public static。后面面向对象具体来讲解修饰符
		返回值类型:就你限定该方法返回值的数据类型(后面我们会写到返回自定义的 类类型)
		方法名:就是这个方法的名字，只要符合命名规则就可以了
		参数列表:
			参数:
				实际参数:就是实际参与运算的参数
				形式参数:就是方法定义上的参数，方便我们调用而已
			参数类型:就是这个参数的数据类型
			参数名:就是你这个参数的名字，其实就是变量名
		方法体语句:就是完成这个功能的代码
		return:结束这个方法的
		返回值：就是这个功能的结果，数据类型要和返回值一致,由return带回。
		
		要想写好一个方法，必须在事前明确两个东西
			A.返回值类型明确
				就是返回结果的具体数据类型
			B.参数列表
				你要传几个参数进来，这些参数又是什么数据类型
		需求:求两个数之间的和
		
		方法执行的特点：
			不调用不执行。
			
		如何调用?(有明确返回值的情况下)
			A.单独调用，一般来说 有返回值的方法没有意义，所以不推荐
			B.输出调用，但是不够好 因为我们可以需要对这个结果另外进行操作
			C.赋值调用，推荐的方法
		